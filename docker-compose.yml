version: '3.8'

services:
  backend:
    build:
      context: ./LANFileSharingSystem
    container_name: cdrrmo-backend
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgres://postgres:myung@postgres:5432/Cdrrmo?sslmode=disable"
      ALLOWED_ORIGINS: "http://localhost:3000,http://192.168.1.84:3000"
    volumes:
      - ./LANFileSharingSystem:/app
    working_dir: /app
    command: go run ./cmd/server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cdrrmo-network

  frontend:
    build:
      context: ./my-app
    container_name: cdrrmo-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_BASE: "http://backend:8080"
    networks:
      - cdrrmo-network

  postgres:
    image: postgres:15
    container_name: cdrrmo-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: myung
      POSTGRES_DB: Cdrrmo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cdrrmo-network

volumes:
  postgres_data:

networks:
  cdrrmo-network:
    driver: bridge
