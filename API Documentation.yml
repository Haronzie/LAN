openapi: 3.0.3
info:
  title: LAN File Sharing System API
  description: >
    API for user management, authentication, inventory, file, directory, and activity/audit log operations.
    All endpoints use session cookie-based authentication and role-based access (admin vs. user).
  version: "1.0.0"
servers:
  - url: https://localhost
    description: Secure local server (HTTPS on port 443)
tags:
  - name: Authentication
    description: Endpoints for registering, logging in, and logging out users.
  - name: User Management
    description: Endpoints for managing users (admin only).
  - name: Inventory
    description: Endpoints for managing inventory items.
  - name: File Management
    description: Endpoints for uploading, downloading, listing, and managing files.
  - name: Directory Management
    description: Endpoints for creating, deleting, renaming, copying, and listing directories.
  - name: Activity Logs
    description: Endpoints for retrieving audit logs.

paths:
  # --- AUTH CONTROLLER ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user (first user is admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request
        '403':
          description: Admin already exists

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      responses:
        '200':
          description: Logout successful
        '401':
          description: Not authenticated

  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Reset admin password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password updated
        '400':
          description: Bad request
        '403':
          description: Forbidden

  /auth/role:
    get:
      tags: [Authentication]
      summary: Get user role by username
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User role
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string

  # --- USER CONTROLLER ---
  /users:
    get:
      tags: [User Management]
      summary: List all users (admin only)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    post:
      tags: [User Management]
      summary: Add a new user (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequest'
      responses:
        '200':
          description: User added successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden

    put:
      tags: [User Management]
      summary: Update a user (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden

    delete:
      tags: [User Management]
      summary: Delete a user (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '404':
          description: User not found

  /users/admin-exists:
    get:
      tags: [User Management]
      summary: Check if admin exists
      responses:
        '200':
          description: Admin existence status
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean

  /users/assign-admin:
    post:
      tags: [User Management]
      summary: Promote user to admin (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignAdminRequest'
      responses:
        '200':
          description: User promoted to admin
        '400':
          description: Bad request
        '403':
          description: Forbidden

  /users/revoke-admin:
    post:
      tags: [User Management]
      summary: Revoke admin role (first admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignAdminRequest'
      responses:
        '200':
          description: Admin privileges revoked
        '400':
          description: Bad request
        '403':
          description: Forbidden

  /users/role:
    get:
      tags: [User Management]
      summary: Get current user's role
      responses:
        '200':
          description: User role
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
        '401':
          description: Not authenticated

  /users/fetch-list:
    get:
      tags: [User Management]
      summary: Fetch user list (with optional search)
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Filtered list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /users/first-admin:
    get:
      tags: [User Management]
      summary: Get first admin user
      responses:
        '200':
          description: First admin info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /users/register:
    post:
      tags: [User Management]
      summary: Register first admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequest'
      responses:
        '200':
          description: Admin registered successfully
        '400':
          description: Bad request
        '403':
          description: Admin already exists

  # --- INVENTORY CONTROLLER ---
  /inventory:
    get:
      tags: [Inventory]
      summary: List all inventory items
      responses:
        '200':
          description: List of inventory items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
    post:
      tags: [Inventory]
      summary: Create a new inventory item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemCreate'
      responses:
        '200':
          description: Item created successfully
        '400':
          description: Bad request

  /inventory/{id}:
    get:
      tags: [Inventory]
      summary: Get inventory item by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Inventory item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '404':
          description: Not found
    put:
      tags: [Inventory]
      summary: Update inventory item by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemCreate'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Bad request
        '404':
          description: Not found
    delete:
      tags: [Inventory]
      summary: Delete inventory item by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Item deleted successfully
        '404':
          description: Not found

  # --- FILE CONTROLLER ---
  /files/upload:
    post:
      tags: [File Management]
      summary: Upload a file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                directory:
                  type: string
                overwrite:
                  type: boolean
                skip:
                  type: boolean
                metadata:
                  type: string
      responses:
        '200':
          description: File uploaded successfully
        '400':
          description: Bad request

  /files/rename:
    post:
      tags: [File Management]
      summary: Rename a file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileRenameRequest'
      responses:
        '200':
          description: File renamed successfully
        '400':
          description: Bad request

  /files/delete:
    post:
      tags: [File Management]
      summary: Delete a file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDeleteRequest'
      responses:
        '200':
          description: File deleted successfully
        '400':
          description: Bad request

  /files/download:
    get:
      tags: [File Management]
      summary: Download a file
      parameters:
        - in: query
          name: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: File download (binary)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Not found

  /files/list:
    get:
      tags: [File Management]
      summary: List files in a directory
      parameters:
        - in: query
          name: directory
          schema:
            type: string
          required: false
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileRecord'

  # --- DIRECTORY CONTROLLER ---
  /directories:
    post:
      tags: [Directory Management]
      summary: Create a directory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryCreateRequest'
      responses:
        '200':
          description: Directory created successfully
        '400':
          description: Bad request

    delete:
      tags: [Directory Management]
      summary: Delete a directory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryDeleteRequest'
      responses:
        '200':
          description: Directory deleted successfully
        '400':
          description: Bad request

    put:
      tags: [Directory Management]
      summary: Rename a directory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryRenameRequest'
      responses:
        '200':
          description: Directory renamed successfully
        '400':
          description: Bad request

  /directories/list:
    get:
      tags: [Directory Management]
      summary: List directories (and optionally files) under a parent
      parameters:
        - in: query
          name: directory
          schema:
            type: string
          required: false
      responses:
        '200':
          description: List of directories/files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryData'

  /directories/copy:
    post:
      tags: [Directory Management]
      summary: Copy a directory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryCopyRequest'
      responses:
        '200':
          description: Directory copied successfully
        '400':
          description: Bad request

  /directories/tree:
    get:
      tags: [Directory Management]
      summary: Get directory tree
      responses:
        '200':
          description: Directory tree
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeNode'

  /directories/move:
    post:
      tags: [Directory Management]
      summary: Move a directory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDirectoryRequest'
      responses:
        '200':
          description: Directory moved successfully
        '400':
          description: Bad request

  /directories/download-folder:
    get:
      tags: [Directory Management]
      summary: Download a folder as zip
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
        - in: query
          name: parent
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Zipped folder download
          content:
            application/zip:
              schema:
                type: string
                format: binary

  # --- ACTIVITY CONTROLLER ---
  /audit-logs:
    get:
      tags: [Activity Logs]
      summary: List file audit logs
      responses:
        '200':
          description: List of audit logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'

components:
  schemas:
    # --- AUTH/USER ---
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ForgotPasswordRequest:
      type: object
      properties:
        username:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
    AddUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        oldUsername:
          type: string
        newUsername:
          type: string
        newPassword:
          type: string
    DeleteUserRequest:
      type: object
      properties:
        username:
          type: string
    AssignAdminRequest:
      type: object
      properties:
        username:
          type: string

    # --- INVENTORY ---
    InventoryItem:
      type: object
      properties:
        id:
          type: integer
        item_name:
          type: string
        quantity:
          type: integer
    InventoryItemCreate:
      type: object
      properties:
        item_name:
          type: string
        quantity:
          type: integer

    # --- FILE ---
    FileRecord:
      type: object
      properties:
        id:
          type: integer
        file_name:
          type: string
        directory:
          type: string
        file_path:
          type: string
        size:
          type: integer
        content_type:
          type: string
        uploader:
          type: string
        metadata:
          type: object
    FileRenameRequest:
      type: object
      properties:
        old_path:
          type: string
        new_name:
          type: string
    FileDeleteRequest:
      type: object
      properties:
        path:
          type: string

    # --- DIRECTORY ---
    DirectoryCreateRequest:
      type: object
      properties:
        name:
          type: string
        parent:
          type: string
    DirectoryDeleteRequest:
      type: object
      properties:
        name:
          type: string
        parent:
          type: string
    DirectoryRenameRequest:
      type: object
      properties:
        old_name:
          type: string
        new_name:
          type: string
        parent:
          type: string
    DirectoryCopyRequest:
      type: object
      properties:
        source:
          type: string
        destination:
          type: string
        new_name:
          type: string
    DirectoryData:
      type: object
      properties:
        name:
          type: string
        parent:
          type: string
    TreeNode:
      type: object
      properties:
        title:
          type: string
        value:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/TreeNode'
    MoveDirectoryRequest:
      type: object
      properties:
        name:
          type: string
        old_parent:
          type: string
        new_parent:
          type: string

    # --- ACTIVITY LOG ---
    AuditLog:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        action:
          type: string
        details:
          type: string
        timestamp:
          type: string
          format: date-time
